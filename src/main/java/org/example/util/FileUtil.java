package org.example.util;import cn.hutool.core.io.resource.ClassPathResource;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.*;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.function.Predicate;import java.util.stream.Collectors;/** * @author jack * @date 2019/4/29 14:09 **/public class FileUtil {    private static final Logger logger = LoggerFactory.getLogger(FileUtil.class);    public static String read(File file) {        try {            return read(file.getAbsolutePath());        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    public static String readRelativeFileBy(String filePath) {        try {            return read(new ClassPathResource(filePath).getAbsolutePath());        } catch (Exception e) {            logger.error("The file" + filePath + "not found");            return null;        }    }    public static String readAbsolutePathByLine(String fileName) {        StringBuilder s = new StringBuilder();        try {            FileReader fileReader = new FileReader(fileName);            BufferedReader bf = new BufferedReader(fileReader);            while (true) {                String line = bf.readLine();                if (line == null) {                    break;                }                s.append(line);            }        } catch (FileNotFoundException e) {            logger.error("The file" + fileName + "not found");        } catch (IOException e) {            logger.error("IOException");        }        return s.toString();    }    public static String read(String path) throws Exception {        FileInputStream fis = new FileInputStream(path);        byte[] b = new byte[fis.available()];        fis.read(b);        fis.close();        return new String(b);    }    public static File read(String absolutePath, String fileName) {        File file = new File(absolutePath.concat("/").concat(fileName));        return file;    }    public static List<File> listFiles(String absolutePath) {        try {            File file = new File(absolutePath);            if (file.exists() && file.isDirectory()) {                return Arrays.asList(file.listFiles());            }        } catch (Exception e) {            e.printStackTrace();        }        return new ArrayList<>();    }    public static List<File> listFiles(String absolutePath, Predicate<File> filter) {        return filterFiles(listFiles(absolutePath), filter);    }    public static List<File> filterFiles(List<File> files, Predicate<File> filter) {        return files.stream().filter(filter).collect(Collectors.toList());    }    public static void write(String absolutePath, String fileName, String content, boolean append) {        if (content == null) {            content = "";        }        createParentDirs(absolutePath);        String concat = absolutePath.concat("/").concat(fileName);        File file = new File(concat);        FileOutputStream fos = null;        try {            fos = new FileOutputStream(file, append);            fos.write(content.getBytes());            fos.flush();            if (fos != null) {                fos.close();            }        } catch (IOException e) {            e.printStackTrace();        }    }    private static void createParentDirs(String absolutePath) {        File f = new File(absolutePath);        if (!f.exists()) {            f.mkdirs();        }    }    public static void write(String filePath, String value, boolean append) {        String path = new ClassPathResource(filePath).getAbsolutePath();        createParentDirs(path);        File file = new File(path);        FileOutputStream fos = null;        try {            fos = new FileOutputStream(file, append);            fos.write(value.getBytes());            fos.flush();            fos.close();        } catch (IOException e) {            e.printStackTrace();        }    }    public static void writeFile(String path,String value){        String resourcesRoot = new ClassPathResource("").getAbsolutePath()+"../../src/main/resources/";        cn.hutool.core.io.FileUtil.writeUtf8String(value, resourcesRoot + path);    }}